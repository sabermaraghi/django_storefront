sudo snap install datagrip --classic

sudo su -
mysql
create user 'saber'@'localhost' identified by 'MyPassword';
grant usage on *.* to 'saber'@'localhost';
grant all privileges on *.* to 'saber'@'localhost';
FLUSH PRIVILEGES;
create database storefront;

edit settings.py   
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
        'HOST': 'localhost',
        'USER': 'saber',
        'PASSWORD': 'MyPassword',
        'PORT': '3306',
    }
}

run datagrip application and restore seed.sql to storefront database

python manage.py migrate

check data recieved in datagrip application
python manage.py runserver
check it in browser
############################################################################
# 05-django-ORM - 5- Retrieving Objects
vim playground/views.py

from django.shortcuts import render
from django.http import HttpResponse
from store.models import Product
from django.core.exceptions import ObjectDoesNotExist

def say_hello(request):
#    query_set = Product.objects.all()
#    try:
#        query_set = Product.objects.get(pk=0)
#    except ObjectDoesNotExist:
#        pass
    product = Product.objects.filter(pk=0).first() #return None; not exception
# or
    product = Product.objects.filter(pk=0).exists()
    #for product in query_set:
    #    print(product)
#    list(query_set)
#    query_set[0:5]
#    query_set.filter().filter().order_by()

    return render(request, 'hello.html', {'name': 'Mosh'})
############################################################################
# 05-django-ORM - 6- Filtering Objects
vim playground/views.py
from django.http import HttpResponse
from store.models import Product
from django.core.exceptions import ObjectDoesNotExist

def say_hello(request):

##    queryset = Product.objects.filter(unit_price__gt=20)
##    queryset = Product.objects.filter(unit_price__range=(20, 100))
##    queryset = Product.objects.filter(collection__id__range=(1, 10))
##    queryset = Product.objects.filter(title__contains='coffee')
##    queryset = Product.objects.filter(title__icontains='coffee')
##    queryset = Product.objects.filter(title__startswith='coffee')
##    queryset = Product.objects.filter(title__endswith='coffee')
##    queryset = Product.objects.filter(last_update__year=2021)
    queryset = Product.objects.filter(description__isnull=True)


    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(queryset)})
######################################
vim playground/templates/hello.html
<html>
  <body>
    ...
    {% endif %}
    <ul>
      {% for product in products %}
      <li>{{ product.title }}</li>
      {% endfor %}
    </ul>
  </body>
</html>
############################################################################
# 05-django-ORM - 7- Complex Lookups Using Q Objects

vim playground/views.py

from django.db.models import Q
    ...
    Products: inventory < 10 AND price < 20
    query_set = Product.objects.filter(inventory__lt=10, unit_price__lt=20)
    query_set = Product.objects.filter(inventory__lt=10).filter(unit_price__lt=20)
    Products: inventory < 10 OR price < 20
    query_set = Product.objects.filter(Q(inventory__lt=10) | Q(unit_price__lt=20))
    query_set = Product.objects.filter(Q(inventory__lt=10) & ~Q(unit_price__lt=20))

    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})
############################################################################
# 05-django-ORM - 8- Referencing Fields using F Objects

vim playground/views.py
from django.db.models import Q, F

    # Products: inventory = price
    query_set = Product.objects.filter(inventory=F('unit_price'))
    query_set = Product.objects.filter(inventory=F('collection__id'))
############################################################################
# 05-django-ORM - 9- Sorting

vim playground/views.py
...
    query_set = Product.objects.order_by('title')
    #query_set = Product.objects.order_by('title')  # Asc
    #query_set = Product.objects.order_by('-title') # Desc
    #query_set = Product.objects.order_by('unit_price', '-title') # Desc
    #query_set = Product.objects.order_by('unit_price', '-title').reverse()
    #query_set = Product.objects.order_by('unit_price', '-title') # Desc
    #query_set = Product.objects.filter(collection_id=1).order_by('unit_price')
#############    
    #product = Product.objects.order_by('unit_price')[0]
    #product = Product.objects.earliest('unit_price')
    #product = Product.objects.latest('unit_price')
    #return render(request, 'hello.html', {'name': 'Mosh', 'product': product})
    
    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})
############################################################################


























