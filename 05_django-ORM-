sudo snap install datagrip --classic

sudo su -
mysql
create user 'saber'@'localhost' identified by 'MyPassword';
grant usage on *.* to 'saber'@'localhost';
grant all privileges on *.* to 'saber'@'localhost';
FLUSH PRIVILEGES;
create database storefront;

edit settings.py   
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
        'HOST': 'localhost',
        'USER': 'saber',
        'PASSWORD': 'MyPassword',
        'PORT': '3306',
    }
}

run datagrip application and restore seed.sql to storefront database

python manage.py migrate

check data recieved in datagrip application
python manage.py runserver
check it in browser
############################################################################
# 05-django-ORM - 5- Retrieving Objects
vim playground/views.py

from django.shortcuts import render
from django.http import HttpResponse
from store.models import Product
from django.core.exceptions import ObjectDoesNotExist

def say_hello(request):
#    query_set = Product.objects.all()
#    try:
#        query_set = Product.objects.get(pk=0)
#    except ObjectDoesNotExist:
#        pass
    product = Product.objects.filter(pk=0).first() #return None; not exception
# or
    product = Product.objects.filter(pk=0).exists()
    #for product in query_set:
    #    print(product)
#    list(query_set)
#    query_set[0:5]
#    query_set.filter().filter().order_by()

    return render(request, 'hello.html', {'name': 'Mosh'})
############################################################################
# 05-django-ORM - 6- Filtering Objects
vim playground/views.py
from django.http import HttpResponse
from store.models import Product
from django.core.exceptions import ObjectDoesNotExist

def say_hello(request):

##    queryset = Product.objects.filter(unit_price__gt=20)
##    queryset = Product.objects.filter(unit_price__range=(20, 100))
##    queryset = Product.objects.filter(collection__id__range=(1, 10))
##    queryset = Product.objects.filter(title__contains='coffee')
##    queryset = Product.objects.filter(title__icontains='coffee')
##    queryset = Product.objects.filter(title__startswith='coffee')
##    queryset = Product.objects.filter(title__endswith='coffee')
##    queryset = Product.objects.filter(last_update__year=2021)
    queryset = Product.objects.filter(description__isnull=True)


    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(queryset)})
######################################
vim playground/templates/hello.html
<html>
  <body>
    ...
    {% endif %}
    <ul>
      {% for product in products %}
      <li>{{ product.title }}</li>
      {% endfor %}
    </ul>
  </body>
</html>
############################################################################
# 05-django-ORM - 7- Complex Lookups Using Q Objects

vim playground/views.py

from django.db.models import Q
    ...
    Products: inventory < 10 AND price < 20
    query_set = Product.objects.filter(inventory__lt=10, unit_price__lt=20)
    query_set = Product.objects.filter(inventory__lt=10).filter(unit_price__lt=20)
    Products: inventory < 10 OR price < 20
    query_set = Product.objects.filter(Q(inventory__lt=10) | Q(unit_price__lt=20))
    query_set = Product.objects.filter(Q(inventory__lt=10) & ~Q(unit_price__lt=20))

    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})
############################################################################
# 05-django-ORM - 8- Referencing Fields using F Objects

vim playground/views.py
from django.db.models import Q, F

    # Products: inventory = price
    query_set = Product.objects.filter(inventory=F('unit_price'))
    query_set = Product.objects.filter(inventory=F('collection__id'))
############################################################################
# 05-django-ORM - 9- Sorting

vim playground/views.py
...
    query_set = Product.objects.order_by('title')
    #query_set = Product.objects.order_by('title')  # Asc
    #query_set = Product.objects.order_by('-title') # Desc
    #query_set = Product.objects.order_by('unit_price', '-title') # Desc
    #query_set = Product.objects.order_by('unit_price', '-title').reverse()
    #query_set = Product.objects.order_by('unit_price', '-title') # Desc
    #query_set = Product.objects.filter(collection_id=1).order_by('unit_price')
#############    
    #product = Product.objects.order_by('unit_price')[0]
    #product = Product.objects.earliest('unit_price')
    #product = Product.objects.latest('unit_price')
    #return render(request, 'hello.html', {'name': 'Mosh', 'product': product})
    
    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})
############################################################################
# 05-django-ORM - 10
vim playground/views.py
    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    #query_set = Product.objects.all()[:10]
    #query_set = Product.objects.all()[10:20]
#####################################################
# 05-django-ORM -11
vim playground/views.py
    #query_set = Product.objects.values('id', 'title')
    #query_set = Product.objects.values('id', 'title', 'collection__title')
    #query_set = Product.objects.values_list('id', 'title', 'collection__title')
    #############
    #select products that have been ordered and sort them by title
    #query_set = OrderItem.objects.values('product__id').distinct()
    query_set = Product.objects.filter(id__in=OrderItem.objects.values('product_id').distinct()).order_by('title')

    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})

#####################################################
# 05-django-ORM -12

vim playground/templates/hello.html
<html>
  <body>
    ...
      <li>{{ product }} ${{ product.unit_price }}</li>
      <li>{{ product }} ${{ product.description }}</li>
   ...
  </body>
</html>

vim playground/views.py

def say_hello(request):
    ...
    #query_set = Product.objects.only('id', 'title')  # terrible Idea 
    query_set = Product.objects.defer('description')
    
    return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})
    
#####################################################
# 05-django-ORM -13
vim playground/templates/hello.html
<html>
  <body>
      ...
      <li>{{ product }} ${{ product.description }}</li>                                 # 1
      <li>{{ product.title }} - {{ product.collection.title }}</li>                     # 2
      <li>{{ product.title }} - {{ product.collection.title }}</li>                     # 3
      <li>{{ product.title }}</li>                                                      # 4
      <li>{{ product.title }} - {{ product.collection.title }}</li>
      {% endfor %}
    </ul>
  </body>
</html>

vim playground/views.py
    ...
    #query_set = Product.objects.select_related('collection').all()                    # 1
    #query_set = Product.objects.select_related('collection__someOtherField').all()    # 2
    # select_related (1)
    # prefetch_related (n)
    #query_set = Product.objects.prefetch_related('promotions').all() # remove product.collections.title from hello.html    # 3
    query_set = Product.objects.select_related('collection').all()                     # 4
    query_set = Product.objects.prefetch_related('promotions').select_related('collection').all()
###########************
    #write a query to get the last five orders with their customer and items, including the product reference in each order item.
    query_set = Order.objects.select_related('customer').order_by('-placed_at')[:5]
    return render(request, 'hello.html', {'name': 'Mosh', 'orders': list(query_set)})
vim playground/templates/hello.html
        ...
      {% for order in orders %}
      <li>{{ order.id }} - {{ order.customer.first_name }}</li>
      {% endfor %}
    </ul>
  </body>
</html>
###########************
    
    
    #return render(request, 'hello.html', {'name': 'Mosh', 'products': list(query_set)})

#####################################################
# 05-django-ORM -14- Aggregating Objects

from django.db.models.aggregates import Count, Max, Min, Avg, Sum
vim playground/views.py
    #14 aggregations
    #result = Product.objects.aggregate(count=Count('id'), min_price=Min('unit_price'))
    result = Product.objects.filter(collection__id=1).aggregate(count=Count('id'), min_price=Min('unit_price'))
    return render(request, 'hello.html', {'name': 'Saber', 'result': result})
    
vim playground/templates/hello.html

<html>
  <body>
    {% if name %}
    <h1>Hello {{ name }}</h1>
    {% else %}
    <h1>Hello World</h1>
    {% endif %} {{ result }}
  </body>
</html>
####################################################
# 05-django-ORM -15- Annotating Objects
vim playground/views.py
from django.db.models import Value, F
    queryset = Customer.objects.annotate(is_new=Value(True))
    queryset = Customer.objects.annotate(new_id=F('id'))
    return render(request, 'hello.html', {'name': 'Saber', 'result': list(queryset)})
 
vim playground/templates/hello.html
<html>
  <body>
    ...
     {{ queryset }}
####################################################
# 05-django-ORM -16- Calling Database Functions

vim playground/views.py
from django.db.models import Value, F, Func
from django.db.models.functions import Concat
    queryset = Customer.objects.annotate(
        # CONCAT
        full_name=Func(F('first_name'), Value(' '),
                       F('last_name'), function='CONCAT'))

    queryset = Customer.objects.annotate(
        # CONCAT
        full_name=Concat('first_name', Value(' '), 'last_name'))
    return render(request, 'hello.html', {'name': 'Saber', 'result': list(queryset)})
####################################################
# 05-django-ORM -


